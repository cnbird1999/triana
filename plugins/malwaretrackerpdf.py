#-------------------------------------------------------------------------------
# Name:        MalwareTracker
# Purpose:     Parse MalwareTracker PDF version. Return an object KEY:VALUE
# Author:      Juan Garrido (A.K.A silverhack)
# Created:     22/04/2013
# Copyright (C) 2013 Threat Intelligent Analysis.
# This file is part of TRIANA http://www.innotecsystem.com
# See the file 'docs/LICENSE' for copying permission.
#-------------------------------------------------------------------------------
import re
from common.constants import COLLECTOR_ROOT
import StringIO
import json
import os
import logging
import requests
import sys
try:
    log = logging.getLogger(__name__)
except:
    pass
#http://www.malwaretracker.com/pdfapirep.php?hash=863f99103941a33fbbe722f0deb3afa5&type=json


class MalwareTrackerPdf:
    def __init__(self):
        self.legend = "Searching in MalwareTracker PDF version"
        self.genreport = dict()
        self.tmp_sanitize = list()
        self.data = ""

    def sanitize(self):
        ###Sanitize simbols
        nosimbols = re.sub(" => ",":",self.data)
        ###Sanitize Array string
        NoArray = re.sub(r".*Array","",nosimbols)
        ###Sanitize parenthesis
        NoParenthesis = re.sub("[()]", '', NoArray)
        ###Sanitize
        buf = StringIO.StringIO(NoParenthesis)
        for line in buf:
            if len(line)>1:
                if not "ssdeep" in line:
                    temp = line.strip().replace("[","").replace("]","").split(":")
                    if len(temp)>1:
                        self.tmp_sanitize.append(({temp[0]:temp[1]}))
                else:
                    temp = line.strip().replace("[","").replace("]","")
                    self.tmp_sanitize.append(({"ssdeep":temp.split("ssdeep:")[1]}))

    def search(self,keys):
        for tmp in self.tmp_sanitize:
            for key in keys:
                for tmpkey,tmpvalue in tmp.items():
                    if key in tmpkey:
                        self.genreport[tmpkey] = tmpvalue

    def search_exploits(self):
        exploits = list()
        for tmp in self.tmp_sanitize:
            for tmpkey,tmpvalue in tmp.items():
                if tmpkey == "exploittype":
                    exploits.append(tmpvalue)
        exploits = list(set(exploits))
        self.genreport["exploits"] = exploits

    def downloadioc(self,md5):
        ioc = requests.get("https://www.malwaretracker.com/pdfexaminer_ioc.php?hash={0}".format(md5))
        tmpout = open(os.path.join(COLLECTOR_ROOT,"tmpannex","pdfioc.xml"),"w")
        tmpout.write(ioc.content)
        tmpout.close()

    def openfile(self):
        try:
            infile = open(os.path.join(COLLECTOR_ROOT,"malware","malwaretrackerpdf"),"r")
            self.data = infile.read()
            infile.close()
        except IOError as error:
            log.error(error)

    def createjson(self):
        return json.dumps(self.genreport,indent=4)
        pass

    def run(self):
        keywords = list()
        keywords = ["filename","size","submitted","md5",
                    "sha1","sha256","ssdeep","encrypted","is_malware","severity",
                    "rating"]
        log.info(self.legend)
        self.openfile()
        if self.data:
            self.sanitize()
        if self.tmp_sanitize:
            self.search(keywords)
        if self.tmp_sanitize:
            self.search_exploits()
        if self.genreport["filename"]!="not found":
            self.downloadioc(self.genreport["md5"])
            self.genreport["status"] = True
            self.genreport["count"] = 10
            return self.genreport
        else:
            self.genreport = dict()
            self.genreport["status"] = False
            self.genreport["count"] = 0
            return self.genreport