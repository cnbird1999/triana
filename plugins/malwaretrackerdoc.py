#-------------------------------------------------------------------------------
# Name:        MalwareTracker
# Purpose:     Parse MalwareTracker DOC page. Return an object KEY:VALUE
# Author:      Juan Garrido (A.K.A silverhack)
# Created:     22/04/2013
# Copyright (C) 2013 Threat Intelligent Analysis.
# This file is part of TRIANA http://www.innotecsystem.com
# See the file 'docs/LICENSE' for copying permission.
#-------------------------------------------------------------------------------
import json
import sys
import os
import logging
from common.constants import COLLECTOR_ROOT

log = logging.getLogger(__name__)


class MalwareTrackerDoc:
    def __init__(self):
        self.legend="Extracting data from MalwareTracker..."
        self.genreport = dict()
    def run(self):
        try:
            log.info(self.legend)
            report = open(os.path.join(COLLECTOR_ROOT,"malware","malwaretrackerdoc"),"r")
            jason = report.readline()
            error = json.loads(jason).get("error")
            if error:
                log.info("Hash not found in MalwareTracker Doc Version")
                self.genreport["status"] = False
                self.genreport["count"] = 0
                return(self.genreport)
            else:
                self.genreport["status"] = True
                report = dict()
                log.info("Found data in MalwareTracker DOC Version")
                report["filename"] = json.loads(jason).get("filename")
                report["size"] = json.loads(jason).get("size")
                report["submitted"] = json.loads(jason).get("submitted")
                report["md5"] = json.loads(jason).get("md5")
                report["sha1"] = json.loads(jason).get("sha1")
                report["sha256"] = json.loads(jason).get("sha256")
                report["ssdeep"] = json.loads(jason).get("ssdeep")
                report["rating"] = json.loads(jason).get("rating")
                report["is_malware"] = json.loads(jason).get("is_malware")
                report["content_type"] = json.loads(jason).get("content-type")
                report["summary"] = json.loads(jason).get("summary")
                self.genreport["count"] = 10
                self.genreport["report"] = report
                return(self.genreport)
        except Exception as e:
            log.error(e)
            log.error("Error in Malwaretracker DOC version...")
            self.genreport["count"] = 0
            self.genreport["status"] = False
            return (self.genreport)

"""Malware = MalwareTrackerDoc()
datos = Malware.run()
for key,value in datos["report"].items():
    print key+":"+value"""